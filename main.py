import os
import telebot
import random
import sqlite3
import time
from datetime import datetime
from keep_alive import keep_alive  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¢–í–û–ô —Ñ–∞–π–ª

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8257786365:AAEVPxQbssUDhRe-wLJkM_mLn50-1m_ym8o")
bot = telebot.TeleBot(BOT_TOKEN)

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('bot_memory.db')
    cursor = conn.cursor()

    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS response_patterns (
            id INTEGER PRIMARY KEY,
            user_message_pattern TEXT,
            bot_response TEXT,
            usage_count INTEGER DEFAULT 0
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∞–∫—Ç–æ–≤ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_facts (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            fact_type TEXT,
            fact_content TEXT,
            created_date DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
    cursor.execute("SELECT COUNT(*) FROM response_patterns")
    if cursor.fetchone()[0] == 0:
        base_patterns = [
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            ('–ø—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üåü'),
            ('—Ö–∞–π', '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üí´'),
            ('–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚òÄÔ∏è'),
            ('–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? üåû'),
            ('–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ö–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å? üåô'),

            # –≠–º–æ—Ü–∏–∏
            ('–≥—Ä—É—Å—Ç–Ω–æ', '–ü–æ–Ω–∏–º–∞—é... –ò–Ω–æ–≥–¥–∞ –≥—Ä—É—Å—Ç—å ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç—É—á–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–∫–æ—Ä–æ –ø—Ä–æ–π–¥–µ—Ç üåßÔ∏è‚û°Ô∏èüåà'),
            ('—É—Å—Ç–∞–ª', '–û—Ç–¥—ã—Ö ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ. –î–∞–≤–∞–π –Ω–∞–π–¥—ë–º –º–∏–Ω—É—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ–¥—ã—à–∫–∏ üõãÔ∏è'),
            ('—Ç—è–∂–µ–ª–æ', '–ó–Ω–∞—é, –±—ã–≤–∞–µ—Ç –Ω–µ–ª–µ–≥–∫–æ... –ù–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! üí™'),
            ('—Ä–∞–¥', '–ó–¥–æ—Ä–æ–≤–æ! –†–∞–¥–æ—Å—Ç—å ‚Äî —ç—Ç–æ —Ç–∞–∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! üéâ'),
            ('—Å–∫—É—á–Ω–æ', '–ú–æ–∂–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–µ—à—å, –æ —á—ë–º –¥—É–º–∞–µ—à—å? üí≠'),

            # –¢–µ–º—ã
            ('–ø–æ–≥–æ–¥–∞', '–ü–æ–≥–æ–¥–∞ ‚Äî –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è üå¶Ô∏è'),
            ('–æ—Å–µ–Ω—å', '–û—Å–µ–Ω—å ‚Äî –≤—Ä–µ–º—è —É—é—Ç–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ –≥–æ—Ä—è—á–µ–≥–æ —á–∞—è üçÇ‚òï'),
            ('–∑–∏–º–∞', '–ó–∏–º–∞ ‚Äî –ø–æ—Ä–∞ —Ç–µ–ø–ª–∞ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π —É –æ–∫–Ω–∞ ‚ùÑÔ∏è'),
            ('–∫–æ–¥', '–ö–æ–¥ ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–∞–∂–¥–æ–º—É üíª'),
            ('–±–æ—Ç', '–ë–æ—Ç—ã ‚Äî –Ω–∞—à–∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –¥—Ä—É–∑—å—è! ü§ñ'),

            # –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ
            ('—Å–º—ã—Å–ª –∂–∏–∑–Ω–∏', '–°–º—ã—Å–ª –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –µ–≥–æ –≤ –∫–∞–∂–¥–æ–º –¥–Ω–µ üåü'),
            ('–∑–∞—á–µ–º –≤—Å—ë —ç—Ç–æ', '–í—Å—ë –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã üí´'),
        ]

        for pattern in base_patterns:
            cursor.execute(
                "INSERT INTO response_patterns (user_message_pattern, bot_response) VALUES (?, ?)",
                pattern)

    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# ========== –°–ò–°–¢–ï–ú–ê –ü–ê–ú–Ø–¢–ò ==========
def remember_fact(user_id, fact_type, content):
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ñ–∞–∫—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        conn = sqlite3.connect('bot_memory.db')
        cursor = conn.cursor()

        cursor.execute(
            "INSERT INTO user_facts (user_id, fact_type, fact_content) VALUES (?, ?, ?)",
            (user_id, fact_type, content)
        )
        conn.commit()
        conn.close()
        print(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª —Ñ–∞–∫—Ç: {fact_type} - {content}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–∫—Ç–∞: {e}")
        return False

def recall_facts(user_id, fact_type=None):
    """–í—Å–ø–æ–º–∏–Ω–∞–µ—Ç —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        conn = sqlite3.connect('bot_memory.db')
        cursor = conn.cursor()

        if fact_type:
            cursor.execute(
                "SELECT fact_content FROM user_facts WHERE user_id = ? AND fact_type = ?",
                (user_id, fact_type)
            )
        else:
            cursor.execute(
                "SELECT fact_type, fact_content FROM user_facts WHERE user_id = ?",
                (user_id,)
            )

        facts = cursor.fetchall()
        conn.close()
        return facts
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤: {e}")
        return []

def extract_facts_from_message(text, user_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text_lower = text.lower()
    facts_found = []

    # –ì–æ—Ä–æ–¥–∞
    city_keywords = ['–≥–æ—Ä–æ–¥', '–∂–∏–≤—É –≤', '–∏–∑ –≥–æ—Ä–æ–¥–∞', '–≤ –≥–æ—Ä–æ–¥–µ']
    if any(keyword in text_lower for keyword in city_keywords):
        words = text.split()
        for i, word in enumerate(words):
            if word.lower() in ['–≥–æ—Ä–æ–¥', '–≥–æ—Ä–æ–¥–µ'] and i + 1 < len(words):
                city = words[i + 1]
                if len(city) > 2:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
                    remember_fact(user_id, 'city', city)
                    facts_found.append(('city', city))

    # –ò–º–µ–Ω–∞
    name_keywords = ['–∑–æ–≤—É—Ç', '–∏–º—è', '–º–µ–Ω—è –∑–æ–≤—É—Ç', '–º–æ–µ –∏–º—è']
    if any(keyword in text_lower for keyword in name_keywords):
        words = text.split()
        for i, word in enumerate(words):
            if word.lower() in ['–∑–æ–≤—É—Ç', '–∏–º—è'] and i + 1 < len(words):
                name = words[i + 1]
                if name[0].isupper():  # –ò–º–µ–Ω–∞ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
                    remember_fact(user_id, 'name', name)
                    facts_found.append(('name', name))

    return facts_found

# ========== –ü–û–ò–°–ö –û–¢–í–ï–¢–û–í ==========
def find_response(user_message):
    """–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('bot_memory.db')
        cursor = conn.cursor()

        cursor.execute(
            "SELECT bot_response FROM response_patterns WHERE ? LIKE '%' || user_message_pattern || '%' LIMIT 1",
            (user_message.lower(), ))

        result = cursor.fetchone()

        if result:
            cursor.execute(
                "UPDATE response_patterns SET usage_count = usage_count + 1 WHERE bot_response = ?",
                (result[0], ))
            conn.commit()
            conn.close()
            return result[0]

        conn.close()
        return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã: {e}")
        return None

# ========== –£–ú–ù–´–ï –û–¢–í–ï–¢–´ ==========
def generate_smart_response(text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ"""
    text_lower = text.lower()

    if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '—Ö–∞–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤', '–¥–æ–±—Ä']):
        return random.choice([
            "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ? üéØ", 
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –†–∞–¥ –Ω–∞—à–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É üí´",
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å? üåü"
        ])

    elif any(word in text_lower for word in ['–≥—Ä—É—Å—Ç–Ω–æ', '–ø–µ—á–∞–ª—å', '—Ç–æ—Å–∫–∞', '–ø–ª–æ—Ö–æ']):
        return random.choice([
            "–ü–æ–Ω–∏–º–∞—é... –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è üçÇ",
            "–ì—Ä—É—Å—Ç—å ‚Äî –∫–∞–∫ –¥–æ–∂–¥—å: –æ—á–∏—â–∞–µ—Ç –¥—É—à—É –¥–ª—è –Ω–æ–≤—ã—Ö —á—É–≤—Å—Ç–≤ üåßÔ∏è",
            "–¢—ã –Ω–µ –æ–¥–∏–Ω –≤ —Å–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö. –Ø —Å —Ç–æ–±–æ–π üíõ"
        ])

    elif any(word in text_lower for word in ['—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤', '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ']):
        return random.choice([
            "–ó–¥–æ—Ä–æ–≤–æ! –ü–æ–∑–∏—Ç–∏–≤ ‚Äî —ç—Ç–æ –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ! üåà",
            "–ö–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ —Å–ª—ã—à–∞—Ç—å! –ü—É—Å—Ç—å —Ç–∞–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ! üéâ",
            "–¢–≤–æ—è —Ä–∞–¥–æ—Å—Ç—å —Å–æ–≥—Ä–µ–≤–∞–µ—Ç! ‚òÄÔ∏è"
        ])

    elif any(word in text_lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å']):
        return random.choice([
            "–í—Å—ë —Ö–æ—Ä–æ—à–æ, —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —Å–æ–±–æ–π! –ê —É —Ç–µ–±—è? üîß",
            "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –±–µ—Å–µ–¥–∞–º. –ê –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üí´",
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –°–ª—É—à–∞—é —Ç–µ–±—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ üëÇ"
        ])

    elif any(word in text_lower for word in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω', '—Å–ø–æ–∫–æ–π–Ω–æ–π']):
        return random.choice([
            "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤! üëã",
            "–ü–æ–∫–∞! –û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è! üåü", 
            "–î–æ —Å–∫–æ—Ä–æ–≥–æ! –ü–æ–º–Ω–∏: —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å üíõ"
        ])

    else:
        return random.choice([
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ? üí≠",
            "–ü–æ–Ω—è–ª —Ç–µ–±—è. –ß—Ç–æ –µ—â—ë —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å? üéØ",
            "–°–ª—É—à–∞—é –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ... –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä? üëÇ",
            "–ó–∞–¥—É–º–∞–ª—Å—è –Ω–∞–¥ —Ç–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏... üí´"
        ])

def create_personalized_response(original_text, user_id, new_facts, known_facts):
    """–°–æ–∑–¥–∞—ë—Ç –æ—Ç–≤–µ—Ç —Å —É—á—ë—Ç–æ–º –∑–Ω–∞–Ω–∏–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    response = find_response(original_text)
    if not response:
        response = generate_smart_response(original_text)

    personal_touch = ""

    for fact_type, content in new_facts:
        if fact_type == 'city':
            personal_touch = f"\n\n–ö—Å—Ç–∞—Ç–∏, –∑–∞–ø–æ–º–Ω–∏–ª —á—Ç–æ —Ç—ã –∏–∑ {content}! –†–∞—Å—Å–∫–∞–∂–µ—à—å –ø—Ä–æ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥? üèôÔ∏è"
        elif fact_type == 'name':
            personal_touch = f"\n\n–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {content}! –ë—É–¥—É –ø–æ–º–Ω–∏—Ç—å —Ç–≤–æ—ë –∏–º—è üí´"

    if known_facts and not new_facts:
        for fact_type, content in known_facts:
            if fact_type == 'city':
                personal_touch = f"\n\n–ö–∞–∫ –¥–µ–ª–∞ –≤ {content}? üåÜ"
                break
            elif fact_type == 'name':
                personal_touch = f"\n\n–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {content}! üí´"
                break

    return response + personal_touch

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = ("–ü—Ä–∏–≤–µ—Ç! –Ø *–¢–∏—Ö–∏–π –¥—Ä—É–≥* ü§ñ\n\n"
                    "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã:\n"
                    "‚Ä¢ –°–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å üëÇ\n" 
                    "‚Ä¢ –í–µ—Å—Ç–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã üí≠\n"
                    "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã üíõ\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
                    "–¢–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/learn - –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è –Ω–æ–≤—ã–º –æ—Ç–≤–µ—Ç–∞–º\n"
                    "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")

    bot.reply_to(message, welcome_text, parse_mode='Markdown')

@bot.message_handler(commands=['learn'])
def teach_bot(message):
    try:
        parts = message.text.split('||')
        if len(parts) == 2:
            question = parts[0].replace('/learn', '').strip()
            answer = parts[1].strip()

            if not question or not answer:
                bot.reply_to(message, "‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏ –≤–æ–ø—Ä–æ—Å, –∏ –æ—Ç–≤–µ—Ç")
                return

            conn = sqlite3.connect('bot_memory.db')
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO response_patterns (user_message_pattern, bot_response) VALUES (?, ?)",
                (question.lower(), answer))
            conn.commit()

            cursor.execute("SELECT COUNT(*) FROM response_patterns")
            total = cursor.fetchone()[0]
            conn.close()

            bot.reply_to(message, f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª!\n\n"
                         f"*–í–æ–ø—Ä–æ—Å:* {question}\n"
                         f"*–û—Ç–≤–µ—Ç:* {answer}\n\n"
                         f"üìö –¢–µ–ø–µ—Ä—å –≤ –±–∞–∑–µ: {total} –æ—Ç–≤–µ—Ç–æ–≤",
                         parse_mode='Markdown')
        else:
            bot.reply_to(message, "üìù *–§–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è:*\n"
                         "`/learn –≤–æ–ø—Ä–æ—Å || –æ—Ç–≤–µ—Ç`\n\n"
                         "*–ü—Ä–∏–º–µ—Ä:*\n"
                         "`/learn —Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É || –ö–æ—Ç—ã ‚Äî —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã!`",
                         parse_mode='Markdown')

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['stats'])
def show_stats(message):
    conn = sqlite3.connect('bot_memory.db')
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM response_patterns")
    total = cursor.fetchone()[0]

    cursor.execute(
        "SELECT user_message_pattern, usage_count FROM response_patterns ORDER BY usage_count DESC LIMIT 5"
    )
    popular = cursor.fetchall()

    conn.close()

    stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π*\n\n"
    stats_text += f"üß† –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total}\n\n"

    if popular:
        stats_text += "üî• *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:*\n"
        for pattern, count in popular:
            stats_text += f"‚Ä¢ '{pattern}': {count} —Ä–∞–∑\n"

    bot.reply_to(message, stats_text, parse_mode='Markdown')

# ========== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ==========
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    try:
        user_id = message.from_user.id
        text = message.text

        print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

        facts = extract_facts_from_message(text, user_id)
        known_facts = recall_facts(user_id)

        personalized_response = create_personalized_response(text, user_id, facts, known_facts)

        bot.reply_to(message, personalized_response)
        print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –£–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!")

# ========== –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ ==========
if __name__ == "__main__":
    print("üéØ –¢–∏—Ö–∏–π –¥—Ä—É–≥ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
    init_database()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –¢–í–û–ô keep_alive
    keep_alive()

    print("üöÄ –ó–∞–ø—É—Å–∫ –¢–∏—Ö–æ–≥–æ –¥—Ä—É–≥–∞...")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    print("üß† –°–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    print("üõ°Ô∏è Keep-alive —Ä–∞–±–æ—Ç–∞–µ—Ç")

    try:
        bot.polling(none_stop=True, interval=1)
        print("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
